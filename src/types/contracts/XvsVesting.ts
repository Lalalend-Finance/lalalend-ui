/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";
import type BN from "bn.js";
import type { EventEmitter } from "events";
import type { EventLog } from "web3-core";
import type { ContractOptions } from "web3-eth-contract";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type NewAdmin = ContractEventLog<{
  oldAdmin: string;
  newAdmin: string;
  0: string;
  1: string;
}>;
export type NewPendingAdmin = ContractEventLog<{
  oldPendingAdmin: string;
  newPendingAdmin: string;
  0: string;
  1: string;
}>;
export type VRTConversionSet = ContractEventLog<{
  vrtConversionAddress: string;
  0: string;
}>;
export type VestedTokensClaimed = ContractEventLog<{
  recipient: string;
  amountClaimed: string;
  0: string;
  1: string;
}>;
export type MIAVested = ContractEventLog<{
  recipient: string;
  startTime: string;
  amount: string;
  withdrawnAmount: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type MIAWithdrawn = ContractEventLog<{
  recipient: string;
  amount: string;
  0: string;
  1: string;
}>;

export interface XvsVesting extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): XvsVesting;
  clone(): XvsVesting;
  methods: {
    _acceptAdmin(): NonPayableTransactionObject<void>;

    _setPendingAdmin(
      newPendingAdmin: string
    ): NonPayableTransactionObject<void>;

    _setVRTConversion(
      _vrtConversionAddress: string
    ): NonPayableTransactionObject<void>;

    admin(): NonPayableTransactionObject<string>;

    deposit(
      recipient: string,
      depositAmount: number | string | BN
    ): NonPayableTransactionObject<void>;

    getCurrentTime(): NonPayableTransactionObject<string>;

    getVestedAmount(recipient: string): NonPayableTransactionObject<string>;

    getWithdrawableAmount(recipient: string): NonPayableTransactionObject<{
      totalWithdrawableAmount: string;
      totalVestedAmount: string;
      totalWithdrawnAmount: string;
      0: string;
      1: string;
      2: string;
    }>;

    numberOfVestings(arg0: string): NonPayableTransactionObject<string>;

    pendingAdmin(): NonPayableTransactionObject<string>;

    vestings(
      arg0: string,
      arg1: number | string | BN
    ): NonPayableTransactionObject<{
      recipient: string;
      startTime: string;
      amount: string;
      withdrawnAmount: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    vrtConversionAddress(): NonPayableTransactionObject<string>;

    withdraw(): NonPayableTransactionObject<void>;

    mia(): NonPayableTransactionObject<string>;

    miaDecimalsMultiplier(): NonPayableTransactionObject<string>;
  };
  events: {
    NewAdmin(cb?: Callback<NewAdmin>): EventEmitter;
    NewAdmin(options?: EventOptions, cb?: Callback<NewAdmin>): EventEmitter;

    NewPendingAdmin(cb?: Callback<NewPendingAdmin>): EventEmitter;
    NewPendingAdmin(
      options?: EventOptions,
      cb?: Callback<NewPendingAdmin>
    ): EventEmitter;

    VRTConversionSet(cb?: Callback<VRTConversionSet>): EventEmitter;
    VRTConversionSet(
      options?: EventOptions,
      cb?: Callback<VRTConversionSet>
    ): EventEmitter;

    VestedTokensClaimed(cb?: Callback<VestedTokensClaimed>): EventEmitter;
    VestedTokensClaimed(
      options?: EventOptions,
      cb?: Callback<VestedTokensClaimed>
    ): EventEmitter;

    MIAVested(cb?: Callback<MIAVested>): EventEmitter;
    MIAVested(options?: EventOptions, cb?: Callback<MIAVested>): EventEmitter;

    MIAWithdrawn(cb?: Callback<MIAWithdrawn>): EventEmitter;
    MIAWithdrawn(
      options?: EventOptions,
      cb?: Callback<MIAWithdrawn>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "NewAdmin", cb: Callback<NewAdmin>): void;
  once(event: "NewAdmin", options: EventOptions, cb: Callback<NewAdmin>): void;

  once(event: "NewPendingAdmin", cb: Callback<NewPendingAdmin>): void;
  once(
    event: "NewPendingAdmin",
    options: EventOptions,
    cb: Callback<NewPendingAdmin>
  ): void;

  once(event: "VRTConversionSet", cb: Callback<VRTConversionSet>): void;
  once(
    event: "VRTConversionSet",
    options: EventOptions,
    cb: Callback<VRTConversionSet>
  ): void;

  once(event: "VestedTokensClaimed", cb: Callback<VestedTokensClaimed>): void;
  once(
    event: "VestedTokensClaimed",
    options: EventOptions,
    cb: Callback<VestedTokensClaimed>
  ): void;

  once(event: "MIAVested", cb: Callback<MIAVested>): void;
  once(
    event: "MIAVested",
    options: EventOptions,
    cb: Callback<MIAVested>
  ): void;

  once(event: "MIAWithdrawn", cb: Callback<MIAWithdrawn>): void;
  once(
    event: "MIAWithdrawn",
    options: EventOptions,
    cb: Callback<MIAWithdrawn>
  ): void;
}
